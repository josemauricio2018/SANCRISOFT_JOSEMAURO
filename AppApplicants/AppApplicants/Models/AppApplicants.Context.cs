//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppApplicants.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BD_APPLICANTSEntities1 : DbContext
    {
        public BD_APPLICANTSEntities1()
            : base("name=BD_APPLICANTSEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Administrator> Administrator { get; set; }
        public DbSet<Applicant> Applicant { get; set; }
        public DbSet<Files_Adjunt> Files_Adjunt { get; set; }
        public DbSet<Job> Job { get; set; }
    
        public virtual ObjectResult<SP_CONSULT_APPLICANT_ALL_Result> SP_CONSULT_APPLICANT_ALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONSULT_APPLICANT_ALL_Result>("SP_CONSULT_APPLICANT_ALL");
        }
    
        public virtual ObjectResult<SP_CONSULT_APPLICANT_BY_ID_Result> SP_CONSULT_APPLICANT_BY_ID(Nullable<int> consecutive)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONSULT_APPLICANT_BY_ID_Result>("SP_CONSULT_APPLICANT_BY_ID", consecutiveParameter);
        }
    
        public virtual ObjectResult<SP_CONSULT_FILE_ADJUNT_Result> SP_CONSULT_FILE_ADJUNT(Nullable<int> iD_Applicant)
        {
            var iD_ApplicantParameter = iD_Applicant.HasValue ?
                new ObjectParameter("ID_Applicant", iD_Applicant) :
                new ObjectParameter("ID_Applicant", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONSULT_FILE_ADJUNT_Result>("SP_CONSULT_FILE_ADJUNT", iD_ApplicantParameter);
        }
    
        public virtual ObjectResult<SP_CONSULT_JOB_Result> SP_CONSULT_JOB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CONSULT_JOB_Result>("SP_CONSULT_JOB");
        }
    
        public virtual int SP_DELETE_APPLICANT(Nullable<int> consecutive)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_APPLICANT", consecutiveParameter);
        }
    
        public virtual int SP_DELETE_FILE_ADJUNT(Nullable<int> consecutive)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_FILE_ADJUNT", consecutiveParameter);
        }
    
        public virtual int SP_EDIT_APPLICANT(Nullable<int> consecutive, Nullable<int> iD_Job, string firts_Name, string second_Name, string first_Last_Name, string second_Last_Name, string email, string international_Phone_Number, string biography, Nullable<System.DateTime> birtday, string street_Adress, string city, string country, string postal_Code, string pathPhotoLocal, string pathPhotoURL)
        {
            var consecutiveParameter = consecutive.HasValue ?
                new ObjectParameter("Consecutive", consecutive) :
                new ObjectParameter("Consecutive", typeof(int));
    
            var iD_JobParameter = iD_Job.HasValue ?
                new ObjectParameter("ID_Job", iD_Job) :
                new ObjectParameter("ID_Job", typeof(int));
    
            var firts_NameParameter = firts_Name != null ?
                new ObjectParameter("Firts_Name", firts_Name) :
                new ObjectParameter("Firts_Name", typeof(string));
    
            var second_NameParameter = second_Name != null ?
                new ObjectParameter("Second_Name", second_Name) :
                new ObjectParameter("Second_Name", typeof(string));
    
            var first_Last_NameParameter = first_Last_Name != null ?
                new ObjectParameter("First_Last_Name", first_Last_Name) :
                new ObjectParameter("First_Last_Name", typeof(string));
    
            var second_Last_NameParameter = second_Last_Name != null ?
                new ObjectParameter("Second_Last_Name", second_Last_Name) :
                new ObjectParameter("Second_Last_Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var international_Phone_NumberParameter = international_Phone_Number != null ?
                new ObjectParameter("International_Phone_Number", international_Phone_Number) :
                new ObjectParameter("International_Phone_Number", typeof(string));
    
            var biographyParameter = biography != null ?
                new ObjectParameter("Biography", biography) :
                new ObjectParameter("Biography", typeof(string));
    
            var birtdayParameter = birtday.HasValue ?
                new ObjectParameter("Birtday", birtday) :
                new ObjectParameter("Birtday", typeof(System.DateTime));
    
            var street_AdressParameter = street_Adress != null ?
                new ObjectParameter("Street_Adress", street_Adress) :
                new ObjectParameter("Street_Adress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var postal_CodeParameter = postal_Code != null ?
                new ObjectParameter("Postal_Code", postal_Code) :
                new ObjectParameter("Postal_Code", typeof(string));
    
            var pathPhotoLocalParameter = pathPhotoLocal != null ?
                new ObjectParameter("PathPhotoLocal", pathPhotoLocal) :
                new ObjectParameter("PathPhotoLocal", typeof(string));
    
            var pathPhotoURLParameter = pathPhotoURL != null ?
                new ObjectParameter("PathPhotoURL", pathPhotoURL) :
                new ObjectParameter("PathPhotoURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EDIT_APPLICANT", consecutiveParameter, iD_JobParameter, firts_NameParameter, second_NameParameter, first_Last_NameParameter, second_Last_NameParameter, emailParameter, international_Phone_NumberParameter, biographyParameter, birtdayParameter, street_AdressParameter, cityParameter, countryParameter, postal_CodeParameter, pathPhotoLocalParameter, pathPhotoURLParameter);
        }
    
        public virtual int SP_INSERT_APPLICANT(Nullable<int> iD_Job, string firts_Name, string second_Name, string first_Last_Name, string second_Last_Name, string email, string international_Phone_Number, string biography, Nullable<System.DateTime> birtday, string street_Adress, string city, string country, string postal_Code, string pathPhotoLocal, string pathPhotoURL, ObjectParameter id_Applicant)
        {
            var iD_JobParameter = iD_Job.HasValue ?
                new ObjectParameter("ID_Job", iD_Job) :
                new ObjectParameter("ID_Job", typeof(int));
    
            var firts_NameParameter = firts_Name != null ?
                new ObjectParameter("Firts_Name", firts_Name) :
                new ObjectParameter("Firts_Name", typeof(string));
    
            var second_NameParameter = second_Name != null ?
                new ObjectParameter("Second_Name", second_Name) :
                new ObjectParameter("Second_Name", typeof(string));
    
            var first_Last_NameParameter = first_Last_Name != null ?
                new ObjectParameter("First_Last_Name", first_Last_Name) :
                new ObjectParameter("First_Last_Name", typeof(string));
    
            var second_Last_NameParameter = second_Last_Name != null ?
                new ObjectParameter("Second_Last_Name", second_Last_Name) :
                new ObjectParameter("Second_Last_Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var international_Phone_NumberParameter = international_Phone_Number != null ?
                new ObjectParameter("International_Phone_Number", international_Phone_Number) :
                new ObjectParameter("International_Phone_Number", typeof(string));
    
            var biographyParameter = biography != null ?
                new ObjectParameter("Biography", biography) :
                new ObjectParameter("Biography", typeof(string));
    
            var birtdayParameter = birtday.HasValue ?
                new ObjectParameter("Birtday", birtday) :
                new ObjectParameter("Birtday", typeof(System.DateTime));
    
            var street_AdressParameter = street_Adress != null ?
                new ObjectParameter("Street_Adress", street_Adress) :
                new ObjectParameter("Street_Adress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var postal_CodeParameter = postal_Code != null ?
                new ObjectParameter("Postal_Code", postal_Code) :
                new ObjectParameter("Postal_Code", typeof(string));
    
            var pathPhotoLocalParameter = pathPhotoLocal != null ?
                new ObjectParameter("PathPhotoLocal", pathPhotoLocal) :
                new ObjectParameter("PathPhotoLocal", typeof(string));
    
            var pathPhotoURLParameter = pathPhotoURL != null ?
                new ObjectParameter("PathPhotoURL", pathPhotoURL) :
                new ObjectParameter("PathPhotoURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_APPLICANT", iD_JobParameter, firts_NameParameter, second_NameParameter, first_Last_NameParameter, second_Last_NameParameter, emailParameter, international_Phone_NumberParameter, biographyParameter, birtdayParameter, street_AdressParameter, cityParameter, countryParameter, postal_CodeParameter, pathPhotoLocalParameter, pathPhotoURLParameter, id_Applicant);
        }
    
        public virtual int SP_INSERT_FILE_ADJUNT(Nullable<int> id_Applicant, string file_Name, string tipe_File, Nullable<decimal> size, string path_File_Local, string path_File_URL, string description_File)
        {
            var id_ApplicantParameter = id_Applicant.HasValue ?
                new ObjectParameter("Id_Applicant", id_Applicant) :
                new ObjectParameter("Id_Applicant", typeof(int));
    
            var file_NameParameter = file_Name != null ?
                new ObjectParameter("File_Name", file_Name) :
                new ObjectParameter("File_Name", typeof(string));
    
            var tipe_FileParameter = tipe_File != null ?
                new ObjectParameter("Tipe_File", tipe_File) :
                new ObjectParameter("Tipe_File", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(decimal));
    
            var path_File_LocalParameter = path_File_Local != null ?
                new ObjectParameter("Path_File_Local", path_File_Local) :
                new ObjectParameter("Path_File_Local", typeof(string));
    
            var path_File_URLParameter = path_File_URL != null ?
                new ObjectParameter("Path_File_URL", path_File_URL) :
                new ObjectParameter("Path_File_URL", typeof(string));
    
            var description_FileParameter = description_File != null ?
                new ObjectParameter("Description_File", description_File) :
                new ObjectParameter("Description_File", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_FILE_ADJUNT", id_ApplicantParameter, file_NameParameter, tipe_FileParameter, sizeParameter, path_File_LocalParameter, path_File_URLParameter, description_FileParameter);
        }
    }
}
